import clr
clr.AddReference("RevitNodes")
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import Revit
clr.ImportExtensions(Revit.Elements)

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import System
from System.Collections.Generic import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication


pointz = IN[0]
surfaces = IN[1]
boolz = []

points_to_remove = []

surfcount = len(surfaces)
pointzcount = len(pointz)


for surface in surfaces:
	for point in pointz:
		if Geometry.DoesIntersect(surface,point) and Geometry.DoesIntersect(surface,point) not in points_to_remove:
			boolz.append(point)



#Assign your output to the OUT variable.
OUT = boolz, surfaces
